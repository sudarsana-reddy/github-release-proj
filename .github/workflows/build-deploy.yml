name: build-deploy

on:
  workflow_call:
    inputs:
      BRANCH:
        description: "branch name"
        type: string
        required: true

      ENVIRONMENT:
        description: "Environment name"
        type: string
        required: true

permissions:
  contents: write
 
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: build
        run: |
          mvn clean install
      

  release:
    needs: build
    runs-on: ubuntu-latest
    if: ${{ inputs.BRANCH == 'main'  && github.event_name != 'pull_request' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Get branch version
        id: getBranchNameAndVersion
        run: |
          echo "getting the branch name"
          branchName=$(git symbolic-ref --short HEAD)
          echo "branch name: $branchName"
          echo "BRANCH_NAME=$branchName" >> "$GITHUB_OUTPUT"
          
          project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "project Version = '$project_version'"
          IFS='-'
          read -ra arr <<< "$project_version"
          art_version=${arr[0]}
          echo "version=$art_version"
          echo "ARTIFACT_VERSION=$art_version"  >> "$GITHUB_OUTPUT"
          echo "PROJECT_VERSION=$project_version"  >> "$GITHUB_OUTPUT"
          

      - name: release to github packages
        run: |
          # mvn clean deploy -s ci_settings.xml          
          git config user.name sudarsana.ala@gmail.com
          # mvn release:clean release:prepare release:perform -s ci_settings.xml -DtagNameFormat=${{steps.getBranchNameAndVersion.outputs.BRANCH_NAME}}-${{steps.getBranchNameAndVersion.outputs.ARTIFACT_VERSION}}
          mvn release:clean release:prepare release:perform -s ci_settings.xml -DreleaseVersion=${{steps.getBranchNameAndVersion.outputs.PROJECT_VERSION}} -DtagNameFormat=${{steps.getBranchNameAndVersion.outputs.BRANCH_NAME}}-${{steps.getBranchNameAndVersion.outputs.ARTIFACT_VERSION}}
        env:
            GITHUB_TOKEN: ${{ secrets.PAT }}
            GIT_USERNAME: ${{ github.actor }}
            GIT_PASSWORD: ${{ secrets.PAT }}
            BITBUCKET_PASSWORD: ${{ secrets.BITBUCKET_PASSWORD }}
            NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}
            
          
          
  deploy:
    needs: [release]
    environment: ${{ inputs.ENVIRONMENT }}
    runs-on: ubuntu-latest
    if: ${{ inputs.BRANCH == 'main'  && github.event_name != 'pull_request' }}
    env:
      GITHUB_TOKEN: ${{ secrets.PAT }}
      TOMCAT_PASSWORD: ${{ secrets.TOMCAT_PASSWORD }}
    steps:
      - name: checkout
        uses: actions/checkout@v3

      - name: Get artifact Version
        id: artifactVersion
        run: |
          project_version=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "project Version = '$project_version'"
          IFS='-'
          read -ra arr <<< "$project_version"
          art_version=${arr[0]}
          echo "version=$art_version"
          echo "ARTIFACT_VERSION=$art_version"  >> "$GITHUB_OUTPUT"

      - name: Copy dependencies
        run: |
          mvn clean dependency:copy -s ci_settings.xml -Ddemo.version=${{ steps.artifactVersion.outputs.ARTIFACT_VERSION }}
          cd target
          ls -ltr        

      - name: deploy to ${{ inputs.ENVIRONMENT }}
        run: |
          warFile="demo-${{ steps.artifactVersion.outputs.ARTIFACT_VERSION }}.war"
          echo "war file:$warFile"
          mvn tomcat7:redeploy -Ddeploy.warFile="./target/$warFile" -Ddeploy.url=${{ secrets.TOMCAT_URL }} -Ddeploy.server=TomcatServer -Ddeploy.path=/hello -s ci_settings.xml
          echo "Deployment to '${{ inputs.ENVIRONMENT  }}' successful"
          
      - name: notification
        run: |
          echo "notification is done. Status: ${{ job.status }}"
